package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS, TIMES, LPAREN, RPAREN, RETURN, SEMI;
terminal Long    INTCONST;

non terminal Program         program;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;

precedence left PLUS, MINUS;
precedence left TIMES;

start with program;

program ::= main:m
            {: :}
         ;

main ::= varDecl:vd main LCURLY stmtList:sl RCURLY
            {: :}
         ;

varDecl ::= type:t IDENT:i
            {: :}
         ;

type ::= INTTYPE
            {: :}
      | REFTYPE
            {: :}
      | QTYPE
            {: :}
      ;

stmtList ::= stmt:s stmtList:sl
            {: :}

      |     /* epsilon */
            {: :}
      ;


stmt ::= RETURN expr:e SEMI
            {: RESULT = new Program(e, loc(eleft, eright)); :}
      |  varDecl:vd EQUALS expr:e SEMI
            {: :}
      |  IF LPAREN cond:c RPAREN stmt:s
            {: :}
      |  IF LPAREN cond:c RPAREN stmt:s ELSE stmt:s
            {: :}
      |  PRINT expr:e SEMI
            {: :}
      | LCURLY stmtList:sl RCURLY
            {: :}
      ;

cond ::= expr:c1 LESS_THAN_OR_EQUAL_TO expr:c2
         {: :}
      |  expr:c1 GREATER_THAN_OR_EQUAL_TO expr:c2
         {: :}
      |  expr:c1 EQUALITY_CHECK expr:c2
         {: :}
      |  expr:c1 NON_EQUALITY_CHECK expr:c2
         {: :}
      |  expr:c1 LESS_THAN expr:c2
         {: :}
      |  expr:c1 GREATER_THAN expr:c2
         {: :}
      |  cond:c1 BOOL_AND cond:c2
         {: :}
      |  cond:c1 BOOL_OR cond:c2
         {: :}
      |  BOOL_NOT cond:c
         {: :}
      |  LPAREN cond:c RPAREN
         {: :}
      ;

      
      
      
      

expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      |  MINUS expr:e
         {: RESULT = new UnaryExpr(e,loc(eleft, eright));:}
      |  IDENT:i
         {: :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
            ;
