package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS, TIMES, LPAREN, RPAREN, LCURLY, RCURLY, RETURN, PRINT, SEMI, INTTYPE, IF, ELSE, LESSTHAN, LESSTHANOREQUALTO, GREATERTHAN, GREATERTHANOREQUALTO, DOUBLEEQUALS, NOTEQUALS, NOT, AND, OR, EQUALS, COMMA, DOT, MUTABLE,Q, REF, WHILE,UMINUS, NIL;


terminal Long INTCONST;
terminal String IDENT;

non terminal Program         program;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal Condition       cond;
non terminal Statement       stmt;
non terminal StatementList   stmtList;
non terminal VarDecl         varDecl;
non terminal Integer         type;
non terminal FuncDef         funcDef;
non terminal FuncDefList     funcDefList;
non terminal FormalDeclList  formalDeclList;
non terminal FormalDeclList  neFormalDeclList;
non terminal ExprList        neExprList;
non terminal ExprList        exprList;


precedence left OR;
precedence left AND;
precedence left NOT;
precedence left LESSTHANOREQUALTO, GREATERTHANOREQUALTO, DOUBLEEQUALS, NOTEQUALS, LESSTHAN, GREATERTHAN;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DOT;
precedence left UMINUS;
precedence left ELSE;
start with program;

program ::= funcDefList:funcdl
      {: RESULT = new Program(funcdl, loc(funcdlleft, funcdlright)); :}
      ;

funcDefList ::= funcDef:fd funcDefList:funcdl
      {: RESULT = new FuncDefList(fd, funcdl, loc(fdleft, fdright)); :}
      | /* empty */
         {: RESULT = null; :}
      ;

funcDef ::= varDecl:v1 LPAREN formalDeclList:fdl RPAREN LCURLY stmtList:sl RCURLY
         {: RESULT = new FuncDef(v1, fdl, sl, loc(slleft, slright)); :}
      ;

varDecl ::= type:t IDENT:i
         {: RESULT = new VarDecl(t, i, loc(tleft,tright)); :}
      ;

type ::= INTTYPE
         {: RESULT = 1;  :}
      |  Q
         {: RESULT = 2;  :}
      |  REF
         {: RESULT = 3;  :}
   ;

formalDeclList ::= neFormalDeclList:nfdl
         {: RESULT = nfdl; :}
      | /* empty */
         /* might be wrong? */
         {: RESULT = null; :}
      ;

neFormalDeclList ::= varDecl:vd COMMA neFormalDeclList:fdl
         {: RESULT = new FormalDeclList(vd,fdl,loc(vdleft,vdright)); :}
      | varDecl:vd
         {: RESULT = new FormalDeclList(vd,null,loc(vdleft,vdright)); :}
      ;      

stmtList ::= stmt:s stmtList:sl
         {: RESULT = new StatementList(s,sl,loc(sleft,sright)); :}
      |  /* empty */
         {: RESULT = null; :}      
      ;

stmt ::= RETURN expr:e SEMI
         {: RESULT = new ReturnStatement(e, loc(eleft, eright)); :}
      |  varDecl:vd EQUALS expr:e SEMI
         {: RESULT = new VarDeclarationStatement(vd, e, loc(vdleft, vdright)); :}
      |  IF cond:c stmt:s
         {: RESULT = new IfStatement(c, s, loc(cleft, cright)); :}
      |  IF cond:c stmt:s1 ELSE stmt:s2
         {: RESULT = new IfElseStatement(c, s1, s2, loc(cleft, cright)); :}
      |  PRINT expr:e SEMI
         {: RESULT = new PrintStatement(e, loc(eleft, eright)); :}
      |  LCURLY stmtList:sl RCURLY
         {: RESULT = sl; :}
      |  WHILE cond:c stmt:s
         {: RESULT = new WhileStatement(c, s, loc(cleft, cright)); :}
      ;

exprList ::= neExprList:nel
         {: RESULT = nel; :}
      |  /* empty */
      /* might be wrong? */
         {: RESULT = null; :}
      ;

neExprList ::= expr:e COMMA neExprList:nel
         {: RESULT = new ExprList(e,nel,loc(eleft,eright)); :}
      |  expr:e
         {: RESULT = new ExprList(e,null,loc(eleft,eright));; :}
      ;

expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      |  MINUS expr:e
         {: RESULT = new UnaryExpr(e,loc(eleft, eright));:}
         %prec UMINUS
      |  IDENT:i
         {: RESULT = new IdentExpr(i, loc(ileft, iright)); :}
      |  IDENT:i LPAREN exprList:el RPAREN
         {: RESULT = new FuncExpr(i,el,loc(ileft,iright)); :}
      |  NIL
         {: RESULT = new NilExpr(); :}
      ;

cond ::= expr:e1 LESSTHANOREQUALTO expr:e2
         {: RESULT = new CondEval(e1, CondEval.LESS_THAN_OR_EQUAL_TO, e2, loc(e1left, e1right)); :}
      |  expr:e1 GREATERTHANOREQUALTO expr:e2
         {: RESULT = new CondEval(e1, CondEval.GREATER_THAN_OR_EQUAL_TO, e2, loc(e1left, e1right)); :}
      |  expr:e1 DOUBLEEQUALS expr:e2
         {: RESULT = new CondEval(e1, CondEval.DOUBLE_EQUALS, e2, loc(e1left, e1right)); :}
      |  expr:e1 NOTEQUALS expr:e2
         {: RESULT = new CondEval(e1, CondEval.NOT_EQUALS, e2, loc(e1left, e1right)); :}
      |  expr:e1 LESSTHAN expr:e2
         {: RESULT = new CondEval(e1, CondEval.LESS_THAN, e2, loc(e1left, e1right)); :}
      |  expr:e1 GREATERTHAN expr:e2
         {: RESULT = new CondEval(e1, CondEval.GREATER_THAN, e2, loc(e1left, e1right)); :}
      |  cond:c1 AND cond:c2
         {: RESULT = new LogicalCond(c1, LogicalCond.BOOL_AND, c2, loc(c1left, c1right)); :}
      |  cond:c1 OR cond:c2
         {: RESULT = new LogicalCond(c1, LogicalCond.BOOL_OR, c2, loc(c1left, c1right)); :}
      |  NOT cond:c
         {: RESULT = new LogicalCond(c, LogicalCond.BOOL_NOT, null, loc(cleft, cright)); :}
      |  LPAREN cond:c RPAREN
         {: RESULT = c; :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
            {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
         |  expr:e1 MINUS expr:e2
            {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
         |  expr:e1 TIMES expr:e2
            {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
         |  expr:e1 DOT expr:e2
            {: RESULT = new BinaryExpr(e1, BinaryExpr.DOT, e2, loc(e1left, e1right)); :}
         ;
